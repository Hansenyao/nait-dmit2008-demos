import Head from 'next/head'
import Image from 'next/image'

import AppBar from '@mui/material/AppBar';
import Avatar from '@mui/material/Avatar';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';

import Card from '@mui/material/Card';
import CardHeader from '@mui/material/CardHeader';
import CardMedia from '@mui/material/CardMedia';
import CardContent from '@mui/material/CardContent';

import Container from '@mui/material/Container';

import InputLabel from '@mui/material/InputLabel';
import Grid from '@mui/material/Grid';
import FormControl from '@mui/material/FormControl';
import FormLabel from '@mui/material/FormLabel';
import FormControlLabel from '@mui/material/FormControlLabel';

import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';


import TextField from '@mui/material/TextField';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';

import {useState} from 'react'
import AdaptationReviewCard from '../components/AdaptationReviewCard';
import { Alert } from '@mui/material';

import { getReviews, postReview, removeReview } from '../utils/api/review';


const MOCK_ADAPTATION_RATING = [{
  'title': 'Fight Club',
  'comment': 'Great movie and book',
  'rating': 10
}]

const REVIEWS_URL = " http://localhost:5000/reviews";

export default function Home() {
  const [reviews, setReviews] = useState(MOCK_ADAPTATION_RATING);
  const [reviewForm, setReviewForm] = useState({title:"", comment:"", rating:0});  
  const [error, setError] = useState(null);

  async function getAllReviews() {
    setError(null);

    getReviews().then((data) => {
        setReviews(data);
      }).catch((e) => {
        setError("Failing in loading data");
      })
  }

  async function addNewReivew(e) {
    e.preventDefault();
    setError(null);

    if (reviewForm.title == "" || 
      reviewForm.comment == "" || 
      reviewForm.rating == 0) {
        setError("Please fill required fields");
        return;
    }

    postReview(reviewForm).then((data) => {
        console.log(data);
        setReviews([data, ...reviews]);
      }).catch((e) => {
        setError("Adding Failed ...");
      })    
      
      // Reset
      setReviewForm({ title: "", comment: "", rating: 0 });
  }

  function deleteReview(id) {
    setError(null);
    
    removeReview(id).then((data) => {
      setReviews(reviews.filter(item => item.id != id));
    }).catch(e => setError("Delete Failed"));
  }

  return (  
    <div>
      <Head>
        <title>Adaptation Reviews.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AppBar position="relative">
        <Toolbar>
          <Typography variant="h6" color="inherit" noWrap>
            Adaptations Reviews
          </Typography>
        </Toolbar>
      </AppBar>
      <main>
        <Container maxWidth="md">
          {error && <Alert>{error}</Alert>}
          <form onSubmit={addNewReivew}>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={12}>
                <TextField
                  id="title"
                  name="title"
                  label="Adaptation Title"
                  fullWidth
                  variant="standard"
                  value={reviewForm.title}
                  onChange={(e) => setReviewForm({ ...reviewForm, title: e.target.value })}
                />
              </Grid>
              <Grid item xs={12} sm={12}>
                <TextField
                  id="review-comments"
                  name="review-comments"
                  label="Comments"
                  fullWidth
                  variant="standard"
                  value={reviewForm.comment}
                  onChange={(e) => setReviewForm({ ...reviewForm, comment: e.target.value })}
                />
              </Grid>
              <Grid item xs={12} sm={12}>
                <FormControl>
                  <FormLabel id="adaptation-rating">Rating</FormLabel>
                  <RadioGroup
                    row
                    aria-labelledby="adaptation-rating"
                    name="rating-buttons-group"
                    value={reviewForm.rating}
                    onChange={(e) => setReviewForm({...reviewForm, rating:e.target.value})}
                  >
                    <FormControlLabel value="1" control={<Radio />} label="1" />
                    <FormControlLabel value="2" control={<Radio />} label="2" />
                    <FormControlLabel value="3" control={<Radio />} label="3" />
                    <FormControlLabel value="4" control={<Radio />} label="4" />
                    <FormControlLabel value="5" control={<Radio />} label="5" />
                    <FormControlLabel value="6" control={<Radio />} label="6" />
                    <FormControlLabel value="7" control={<Radio />} label="7" />
                    <FormControlLabel value="8" control={<Radio />} label="8" />
                    <FormControlLabel value="9" control={<Radio />} label="9" />
                    <FormControlLabel value="10" control={<Radio />} label="10" />
                  </RadioGroup>
               </FormControl>
              </Grid>
              <Grid item xs={12} sm={12}>
                <Button
                  variant="contained"
                  type="submit"
                >
                  Add New Review
                </Button>
              </Grid>
            </Grid>
          </form>
          <Box
            sx={{
              pt: 2,
              pb: 2,
            }}
          >
            <Button
              variant="contained"
              onClick={getAllReviews}
            >
              Load All Current Reviews
            </Button>
          </Box>
          {reviews.map((adaptation, index)=> {
            return <AdaptationReviewCard 
                      key={index} 
                      id={adaptation.id}
                      rating={adaptation.rating} 
                      title={adaptation.title} 
                      comment={adaptation.comment}
                      onDelete={deleteReview}
                    />
          })}
        </Container>
      </main>
    </div>
  )
}
